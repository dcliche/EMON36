from machine import Pin, SPI, SoftSPI
from ssd1331 import SSD1331
import time
from umqttsimple import MQTTClient
import ubinascii
import machine
import micropython
import network
import esp
import json
import gc

config = None
oled = None

client_id = ubinascii.hexlify(machine.unique_id())
topic_sub = b'notification'
topic_pub = b'home/sensor1/infojson'

last_message = 0
message_interval = 5
counter = 0

font = [
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],  # 0000 (uni0000.dup1)
    [0x7e, 0x81, 0xa5, 0x81, 0xbd, 0x99, 0x81, 0x7e],  # 0001 (uni0001)
    [0x7e, 0xff, 0xdb, 0xff, 0xc3, 0xe7, 0xff, 0x7e],  # 0002 (uni0002)
    [0x6c, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00],  # 0003 (uni0003)
    [0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00],  # 0004 (uni0004)
    [0x38, 0x7c, 0x38, 0xfe, 0xfe, 0x7c, 0x38, 0x7c],  # 0005 (uni0005)
    [0x10, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x7c],  # 0006 (uni0006)
    [0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00],  # 0007 (uni0007)
    [0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff],  # 0008 (uni0008)
    [0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00],  # 0009 (uni0009)
    [0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff],  # 000a (uni000A)
    [0x0f, 0x07, 0x0f, 0x7d, 0xcc, 0xcc, 0xcc, 0x78],  # 000b (uni000B)
    [0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18],  # 000c (uni000C)
    [0x3f, 0x33, 0x3f, 0x30, 0x30, 0x70, 0xf0, 0xe0],  # 000d (uni000D)
    [0x7f, 0x63, 0x7f, 0x63, 0x63, 0x67, 0xe6, 0xc0],  # 000e (uni000E)
    [0x99, 0x5a, 0x3c, 0xe7, 0xe7, 0x3c, 0x5a, 0x99],  # 000f (uni000F)
    [0x80, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0x80, 0x00],  # 0010 (uni0010)
    [0x02, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x02, 0x00],  # 0011 (uni0011)
    [0x18, 0x3c, 0x7e, 0x18, 0x18, 0x7e, 0x3c, 0x18],  # 0012 (uni0012)
    [0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x00],  # 0013 (uni0013)
    [0x7f, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x00],  # 0014 (uni0014)
    [0x3e, 0x63, 0x38, 0x6c, 0x6c, 0x38, 0xcc, 0x78],  # 0015 (uni0015)
    [0x00, 0x00, 0x00, 0x00, 0x7e, 0x7e, 0x7e, 0x00],  # 0016 (uni0016)
    [0x18, 0x3c, 0x7e, 0x18, 0x7e, 0x3c, 0x18, 0xff],  # 0017 (uni0017)
    [0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x00],  # 0018 (uni0018)
    [0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00],  # 0019 (uni0019)
    [0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00],  # 001a (uni001A)
    [0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00],  # 001b (uni001B)
    [0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00],  # 001c (uni001C)
    [0x00, 0x24, 0x66, 0xff, 0x66, 0x24, 0x00, 0x00],  # 001d (uni001D)
    [0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x00, 0x00],  # 001e (uni001E)
    [0x00, 0xff, 0xff, 0x7e, 0x3c, 0x18, 0x00, 0x00],  # 001f (uni001F)
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],  # 0020 (space)
    [0x30, 0x78, 0x78, 0x30, 0x30, 0x00, 0x30, 0x00],  # 0021 (exclam)
    [0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00],  # 0022 (quotedbl)
    [0x6c, 0x6c, 0xfe, 0x6c, 0xfe, 0x6c, 0x6c, 0x00],  # 0023 (numbersign)
    [0x30, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x30, 0x00],  # 0024 (dollar)
    [0x00, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xc6, 0x00],  # 0025 (percent)
    [0x38, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0x76, 0x00],  # 0026 (ampersand)
    [0x60, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00],  # 0027 (quotesingle)
    [0x18, 0x30, 0x60, 0x60, 0x60, 0x30, 0x18, 0x00],  # 0028 (parenleft)
    [0x60, 0x30, 0x18, 0x18, 0x18, 0x30, 0x60, 0x00],  # 0029 (parenright)
    [0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00],  # 002a (asterisk)
    [0x00, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x00, 0x00],  # 002b (plus)
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x60],  # 002c (comma)
    [0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00],  # 002d (hyphen)
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00],  # 002e (period)
    [0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00],  # 002f (slash)
    [0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6, 0x7c, 0x00],  # 0030 (zero)
    [0x30, 0x70, 0x30, 0x30, 0x30, 0x30, 0xfc, 0x00],  # 0031 (one)
    [0x78, 0xcc, 0x0c, 0x38, 0x60, 0xc4, 0xfc, 0x00],  # 0032 (two)
    [0x78, 0xcc, 0x0c, 0x38, 0x0c, 0xcc, 0x78, 0x00],  # 0033 (three)
    [0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x1e, 0x00],  # 0034 (four)
    [0xfc, 0xc0, 0xf8, 0x0c, 0x0c, 0xcc, 0x78, 0x00],  # 0035 (five)
    [0x38, 0x60, 0xc0, 0xf8, 0xcc, 0xcc, 0x78, 0x00],  # 0036 (six)
    [0xfc, 0xcc, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x00],  # 0037 (seven)
    [0x78, 0xcc, 0xcc, 0x78, 0xcc, 0xcc, 0x78, 0x00],  # 0038 (eight)
    [0x78, 0xcc, 0xcc, 0x7c, 0x0c, 0x18, 0x70, 0x00],  # 0039 (nine)
    [0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x00],  # 003a (colon)
    [0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x60, 0x00],  # 003b (semicolon)
    [0x18, 0x30, 0x60, 0xc0, 0x60, 0x30, 0x18, 0x00],  # 003c (less)
    [0x00, 0x00, 0xfc, 0x00, 0x00, 0xfc, 0x00, 0x00],  # 003d (equal)
    [0x60, 0x30, 0x18, 0x0c, 0x18, 0x30, 0x60, 0x00],  # 003e (greater)
    [0x78, 0xcc, 0x0c, 0x18, 0x30, 0x00, 0x30, 0x00],  # 003f (question)
    [0x7c, 0xc6, 0xde, 0xde, 0xde, 0xc0, 0x78, 0x00],  # 0040 (at)
    [0x30, 0x78, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0x00],  # 0041 (A)
    [0xfc, 0x66, 0x66, 0x7c, 0x66, 0x66, 0xfc, 0x00],  # 0042 (B)
    [0x3c, 0x66, 0xc0, 0xc0, 0xc0, 0x66, 0x3c, 0x00],  # 0043 (C)
    [0xf8, 0x6c, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00],  # 0044 (D)
    [0xfe, 0x62, 0x68, 0x78, 0x68, 0x62, 0xfe, 0x00],  # 0045 (E)
    [0xfe, 0x62, 0x68, 0x78, 0x68, 0x60, 0xf0, 0x00],  # 0046 (F)
    [0x3c, 0x66, 0xc0, 0xc0, 0xce, 0x66, 0x3e, 0x00],  # 0047 (G)
    [0xcc, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0xcc, 0x00],  # 0048 (H)
    [0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00],  # 0049 (I)
    [0x1e, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00],  # 004a (J)
    [0xe6, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00],  # 004b (K)
    [0xf0, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00],  # 004c (L)
    [0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0x00],  # 004d (M)
    [0xc6, 0xe6, 0xf6, 0xde, 0xce, 0xc6, 0xc6, 0x00],  # 004e (N)
    [0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00],  # 004f (O)
    [0xfc, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00],  # 0050 (P)
    [0x78, 0xcc, 0xcc, 0xcc, 0xdc, 0x78, 0x1c, 0x00],  # 0051 (Q)
    [0xfc, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0xe6, 0x00],  # 0052 (R)
    [0x78, 0xcc, 0xe0, 0x70, 0x1c, 0xcc, 0x78, 0x00],  # 0053 (S)
    [0xfc, 0xb4, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00],  # 0054 (T)
    [0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xfc, 0x00],  # 0055 (U)
    [0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00],  # 0056 (V)
    [0xc6, 0xc6, 0xc6, 0xd6, 0xfe, 0xee, 0xc6, 0x00],  # 0057 (W)
    [0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x6c, 0xc6, 0x00],  # 0058 (X)
    [0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x30, 0x78, 0x00],  # 0059 (Y)
    [0xfe, 0xc6, 0x8c, 0x18, 0x32, 0x66, 0xfe, 0x00],  # 005a (Z)
    [0x78, 0x60, 0x60, 0x60, 0x60, 0x60, 0x78, 0x00],  # 005b (bracketleft)
    [0xc0, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x02, 0x00],  # 005c (backslash)
    [0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x78, 0x00],  # 005d (bracketright)
    [0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00],  # 005e (asciicircum)
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff],  # 005f (underscore)
    [0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00],  # 0060 (grave)
    [0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x76, 0x00],  # 0061 (a)
    [0xe0, 0x60, 0x60, 0x7c, 0x66, 0x66, 0xdc, 0x00],  # 0062 (b)
    [0x00, 0x00, 0x78, 0xcc, 0xc0, 0xcc, 0x78, 0x00],  # 0063 (c)
    [0x1c, 0x0c, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00],  # 0064 (d)
    [0x00, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00],  # 0065 (e)
    [0x38, 0x6c, 0x60, 0xf0, 0x60, 0x60, 0xf0, 0x00],  # 0066 (f)
    [0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8],  # 0067 (g)
    [0xe0, 0x60, 0x6c, 0x76, 0x66, 0x66, 0xe6, 0x00],  # 0068 (h)
    [0x30, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00],  # 0069 (i)
    [0x0c, 0x00, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78],  # 006a (j)
    [0xe0, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0xe6, 0x00],  # 006b (k)
    [0x70, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00],  # 006c (l)
    [0x00, 0x00, 0xcc, 0xfe, 0xfe, 0xd6, 0xc6, 0x00],  # 006d (m)
    [0x00, 0x00, 0xf8, 0xcc, 0xcc, 0xcc, 0xcc, 0x00],  # 006e (n)
    [0x00, 0x00, 0x78, 0xcc, 0xcc, 0xcc, 0x78, 0x00],  # 006f (o)
    [0x00, 0x00, 0xdc, 0x66, 0x66, 0x7c, 0x60, 0xf0],  # 0070 (p)
    [0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0x1e],  # 0071 (q)
    [0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0xf0, 0x00],  # 0072 (r)
    [0x00, 0x00, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x00],  # 0073 (s)
    [0x10, 0x30, 0x7c, 0x30, 0x30, 0x34, 0x18, 0x00],  # 0074 (t)
    [0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00],  # 0075 (u)
    [0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00],  # 0076 (v)
    [0x00, 0x00, 0xc6, 0xd6, 0xfe, 0xfe, 0x6c, 0x00],  # 0077 (w)
    [0x00, 0x00, 0xc6, 0x6c, 0x38, 0x6c, 0xc6, 0x00],  # 0078 (x)
    [0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8],  # 0079 (y)
    [0x00, 0x00, 0xfc, 0x98, 0x30, 0x64, 0xfc, 0x00],  # 007a (z)
    [0x1c, 0x30, 0x30, 0xe0, 0x30, 0x30, 0x1c, 0x00],  # 007b (braceleft)
    [0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00],  # 007c (bar)
    [0xe0, 0x30, 0x30, 0x1c, 0x30, 0x30, 0xe0, 0x00],  # 007d (braceright)
    [0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],  # 007e (asciitilde)
    [0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0x00],  # 007f (uni007F)
]

def sub_cb(topic, msg):
    print((topic, msg))
    if topic == b'notification' and msg == b'received':
        print('ESP received hello message')


def connect_and_subscribe():
    client = MQTTClient(client_id, config['mqtt_server'], user=config['mqtt_user'], password=config['mqtt_password'])
    client.set_callback(sub_cb)
    client.connect()
    client.subscribe(topic_sub)
    print('Connected to %s MQTT broker, subscribed to %s topic' % (config['mqtt_server'], topic_sub))
    return client


def restart_and_reconnect():
    print('Failed to connect to MQTT broker. Reconnecting...')
    time.sleep(10)
    machine.reset()


def load_config():
    global config
    try:
        with open('config.json') as json_file:
            config = json.load(json_file)
    except:
        return False
    return True


def draw_text(x, y, text, r=255, g=255, b=255):
    for c in text:
        oled.draw_8x8_mono_bitmap(x * 8, y * 8, font[ord(c)], r, g, b)
        x += 1


def run():

    p3=Pin(3, Pin.IN, Pin.PULL_UP)
    p3.irq(lambda p:print(p, p.value()))
    p4=Pin(4, Pin.IN, Pin.PULL_UP)
    p4.irq(lambda p:print(p, p.value()))
    p5=Pin(5, Pin.IN, Pin.PULL_UP)
    p5.irq(lambda p:print(p, p.value()))
    p8=Pin(8, Pin.IN, Pin.PULL_UP)
    p8.irq(lambda p:print(p, p.value()))
    p9=Pin(9, Pin.IN, Pin.PULL_UP)
    p9.irq(lambda p:print(p, p.value()))
    p10=Pin(10, Pin.IN, Pin.PULL_UP)
    p10.irq(lambda p:print(p, p.value()))

    pin_sck=Pin(6, Pin.OUT)
    pin_mosi=Pin(7, Pin.OUT)
    pin_miso=Pin(2, Pin.IN)
    pin_cs=Pin(20, Pin.OUT)
    pin_cd=Pin(1, Pin.OUT)
    pin_res=Pin(0, Pin.OUT)

    spi = SoftSPI(baudrate=100000, sck=pin_sck, mosi=pin_mosi, miso=pin_miso)
    global oled
    oled = SSD1331(spi=spi, cs=pin_cs, cd=pin_cd, res=pin_res)
    oled.clear()

    draw_text(0, 0, "EEMON42", 255, 255, 0)
    draw_text(1, 3, "Counter: ")




def run_client():

    global last_message, counter

    if not load_config():
        print("Unable to load the configuration")
        return
        
    station = network.WLAN(network.STA_IF)

    if station.isconnected():
        station.disconnect()

    station.active(True)
    station.connect(config['ssid'], config['password'])

    while station.isconnected() == False:
        pass

    print('Connection successful')
    print(station.ifconfig())

    try:
        client = connect_and_subscribe()
    except OSError as e:
        restart_and_reconnect()

    while True:
        try:
            client.check_msg()
            if (time.time() - last_message) > message_interval:
                msg = json.dumps({"counter":counter})
                client.publish(topic_pub, msg)
                last_message = time.time()
                counter += 1
                draw_text(3, 4, "          ")
                draw_text(3, 4, str(counter), 0, 255, 0)
        except OSError as e:
            restart_and_reconnect()

